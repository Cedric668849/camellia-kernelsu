name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 清理磁盘空间
      run: |
        echo "===== 清理前磁盘使用 ====="
        df -h

        echo "清理不需要的软件..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL

        echo "清理APT缓存..."
        sudo apt-get clean
        sudo apt-get autoremove -y

        echo "===== 清理后磁盘使用 ====="
        df -h

    - name: 安装编译依赖
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: 下载内核源码
      run: |
        cd $HOME
        echo "下载内核源码..."
        wget -q --show-progress --timeout=300 \
          https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
          -O kernel.zip || \
        wget -q --show-progress --timeout=300 \
          https://ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
          -O kernel.zip

        unzip -q kernel.zip
        mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel
        rm kernel.zip

    - name: 下载KernelSU
      run: |
        cd $HOME
        echo "下载KernelSU..."
        wget -q --show-progress \
          https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
          -O kernelsu.zip || \
        wget -q --show-progress \
          https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
          -O kernelsu.zip

        unzip -q kernelsu.zip
        mv KernelSU-* KernelSU
        rm kernelsu.zip

    - name: 集成KernelSU
      run: |
        cd $HOME/kernel
        cp -r $HOME/KernelSU/kernel drivers/kernelsu
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

    - name: 编译内核
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KCFLAGS="-w"

        echo "配置内核..."
        make camellia_defconfig

        # 添加KernelSU
        echo "CONFIG_KSU=y" >> .config
        make olddefconfig

        echo "开始编译..."
        make -j$(nproc) Image.gz-dtb 2>&1 | tee build.log || true

        echo ""
        echo "===== 查找编译产物 ====="

        # 查找所有可能的内核镜像位置
        echo "查找Image.gz-dtb..."
        find . -name "Image.gz-dtb" -type f 2>/dev/null | while read f; do
          echo "找到: $f ($(ls -lh "$f" | awk '{print $5}'))"
        done

        echo ""
        echo "查找Image.gz..."
        find . -name "Image.gz" -type f 2>/dev/null | while read f; do
          echo "找到: $f ($(ls -lh "$f" | awk '{print $5}'))"
        done

        echo ""
        echo "查找Image..."
        find . -name "Image" -type f 2>/dev/null | while read f; do
          echo "找到: $f ($(ls -lh "$f" | awk '{print $5}'))"
        done

        echo ""
        echo "查找zImage..."
        find . -name "zImage" -type f 2>/dev/null | while read f; do
          echo "找到: $f ($(ls -lh "$f" | awk '{print $5}'))"
        done

        echo ""
        echo "查找vmlinux..."
        if [ -f "vmlinux" ]; then
          echo "找到vmlinux ($(ls -lh vmlinux | awk '{print $5}'))"
        fi

        echo ""
        echo "===== 尝试继续编译 ====="

        # 如果没有找到Image.gz-dtb，尝试单独编译
        if [ ! -f "arch/arm64/boot/Image.gz-dtb" ]; then
          echo "尝试编译Image..."
          make Image || true

          echo "尝试编译dtbs..."
          make dtbs || true

          echo "尝试手动合并..."
          if [ -f "arch/arm64/boot/Image" ]; then
            echo "压缩Image..."
            gzip -c arch/arm64/boot/Image > arch/arm64/boot/Image.gz || true
          fi

          if [ -f "arch/arm64/boot/Image.gz" ] && [ -d "arch/arm64/boot/dts" ]; then
            echo "尝试合并dtb..."
            # 查找dtb文件
            DTB=$(find arch/arm64/boot/dts -name "*.dtb" 2>/dev/null | head -1)
            if [ -n "$DTB" ]; then
              echo "使用DTB: $DTB"
              cat arch/arm64/boot/Image.gz "$DTB" > arch/arm64/boot/Image.gz-dtb
            fi
          fi
        fi

        echo ""
        echo "===== 最终检查 ====="

        # 最终检查
        if [ -f "arch/arm64/boot/Image.gz-dtb" ]; then
          echo "✅ 成功找到Image.gz-dtb!"
          ls -lh arch/arm64/boot/Image.gz-dtb
        elif [ -f "arch/arm64/boot/Image" ]; then
          echo "⚠️ 只找到Image，使用它代替"
          cp arch/arm64/boot/Image arch/arm64/boot/Image.gz-dtb
        elif [ -f "vmlinux" ]; then
          echo "⚠️ 只找到vmlinux，尝试提取"
          aarch64-linux-gnu-objcopy -O binary vmlinux arch/arm64/boot/Image
          gzip -c arch/arm64/boot/Image > arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 未找到任何内核文件"
          echo "显示编译日志最后100行："
          tail -n 100 build.log
          exit 1
        fi

    - name: 打包产物
      run: |
        mkdir -p output

        # 复制内核（如果存在）
        if [ -f "$HOME/kernel/arch/arm64/boot/Image.gz-dtb" ]; then
          cp "$HOME/kernel/arch/arm64/boot/Image.gz-dtb" output/
          echo "内核大小: $(ls -lh output/Image.gz-dtb | awk '{print $5}')"
        elif [ -f "$HOME/kernel/arch/arm64/boot/Image" ]; then
          cp "$HOME/kernel/arch/arm64/boot/Image" output/Image.gz-dtb
          echo "使用未压缩内核，大小: $(ls -lh output/Image.gz-dtb | awk '{print $5}')"
        fi

        # 下载magiskboot
        cd output
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk
        unzip -q -j Magisk-26.4.apk 'lib/x86_64/libmagiskboot.so'
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-26.4.apk

        # 创建脚本
        cat > make_boot.sh << 'EOF'
        #!/bin/bash
        echo "KernelSU Boot制作工具"
        if [ ! -f boot.img ]; then
          echo "请放入原版boot.img"
          exit 1
        fi
        ./magiskboot unpack boot.img
        cp Image.gz-dtb kernel
        ./magiskboot repack boot.img
        echo "完成! 输出: new-boot.img"
        EOF
        chmod +x make_boot.sh

        # 创建说明
        cat > README.txt << 'EOF'
        KernelSU内核 - 红米Note 10

        注意：如果内核文件很大(>50MB)，可能是未压缩的Image
        这种情况下刷入可能会失败，请谨慎测试

        使用步骤:
        1. 备份原boot.img
        2. 运行make_boot.sh
        3. 刷入new-boot.img
        4. 安装KernelSU管理器
        EOF

    - name: 上传结果
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Camellia
        path: output/
