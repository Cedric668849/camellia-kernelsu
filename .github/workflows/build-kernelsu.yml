name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: 最大化构建空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-docker-images: 'true'

    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装编译依赖
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

        echo "GCC版本:"
        aarch64-linux-gnu-gcc --version

    - name: 设置ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: "2G"

    - name: 下载内核源码（使用压缩包）
      run: |
        cd $HOME
        echo "开始下载内核源码压缩包..."

        # 直接下载ZIP压缩包（比git clone快很多）
        wget -q --show-progress --timeout=300 \
          https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
          -O kernel.zip || {
            echo "GitHub下载失败，尝试加速链接..."
            # 使用GitHub加速服务
            wget -q --show-progress --timeout=300 \
              https://ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
              -O kernel.zip || {
                echo "使用镜像下载..."
                wget -q --show-progress --timeout=300 \
                  https://mirror.ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
                  -O kernel.zip
              }
          }

        echo "解压内核源码..."
        unzip -q kernel.zip
        mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel
        rm kernel.zip

        echo "内核源码准备完成"
        ls -la kernel/

    - name: 下载KernelSU
      run: |
        cd $HOME
        echo "下载KernelSU..."

        if [ -n "${{ github.event.inputs.kernelsu_version }}" ]; then
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/tags/${{ github.event.inputs.kernelsu_version }}.zip \
            -O kernelsu.zip
        else
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
            -O kernelsu.zip
        fi

        unzip -q kernelsu.zip
        mv KernelSU-* KernelSU
        rm kernelsu.zip

        echo "KernelSU准备完成"

    - name: 集成KernelSU到内核
      run: |
        cd $HOME/kernel

        # 复制KernelSU模块到内核
        cp -r $HOME/KernelSU/kernel drivers/kernelsu

        # 验证
        if [ -d "drivers/kernelsu" ]; then
          echo "✅ KernelSU集成成功"
          ls -la drivers/kernelsu/
        else
          echo "❌ KernelSU集成失败"
          exit 1
        fi

        # 修改Makefile
        if ! grep -q "kernelsu" drivers/Makefile; then
          echo 'obj-y += kernelsu/' >> drivers/Makefile
        fi

        # 修改Kconfig
        if ! grep -q "kernelsu" drivers/Kconfig; then
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        fi

        echo "KernelSU集成配置完成"

    - name: 配置内核
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-

        # 使用camellia默认配置
        make camellia_defconfig

        # 禁用会导致编译失败的选项
        scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
        scripts/config --disable CONFIG_CC_STACKPROTECTOR

        # 启用KernelSU需要的选项
        scripts/config --enable CONFIG_KPROBES
        scripts/config --enable CONFIG_HAVE_KPROBES
        scripts/config --enable CONFIG_KPROBE_EVENTS

        # 添加KernelSU配置
        echo "CONFIG_KSU=y" >> .config

        # 更新配置
        make olddefconfig

        echo "内核配置完成，验证关键配置:"
        grep -E "CONFIG_KSU|CONFIG_KPROBES|STACKPROTECTOR" .config || true

    - name: 编译内核
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export KCFLAGS="-w"

        echo "开始编译内核 (使用 $(nproc) 线程)..."
        echo "预计需要15-20分钟..."

        # 编译内核镜像
        make -j$(nproc) Image.gz-dtb 2>&1 | tail -n 100

        # 检查编译结果
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          echo "✅ 内核编译成功!"
          ls -lh arch/arm64/boot/Image.gz-dtb
        else
          echo "❌ 内核编译失败"
          echo "查看最后的错误信息..."
          exit 1
        fi

    - name: 打包编译产物
      run: |
        mkdir -p $HOME/output

        # 复制内核
        cp $HOME/kernel/arch/arm64/boot/Image.gz-dtb $HOME/output/

        # 下载boot.img处理工具
        cd $HOME/output
        echo "下载boot.img处理工具..."
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk
        unzip -q -j Magisk-26.4.apk 'lib/x86_64/libmagiskboot.so'
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-26.4.apk

        # 创建Windows批处理脚本
        cat > make_boot.bat << 'BAT_END'
        @echo off
        echo KernelSU Boot.img 制作工具 (Windows)
        echo =====================================
        echo.

        if not exist boot.img (
          echo 错误: 请先将原版boot.img放到本目录
          pause
          exit /b 1
        )

        echo [1/3] 解包boot.img...
        magiskboot.exe unpack boot.img

        echo [2/3] 替换为KernelSU内核...
        copy /Y Image.gz-dtb kernel

        echo [3/3] 重新打包...
        magiskboot.exe repack boot.img

        echo.
        echo 完成! 生成文件: new-boot.img
        echo.
        echo 刷入方法:
        echo   adb reboot bootloader
        echo   fastboot flash boot new-boot.img
        echo   fastboot reboot
        echo.
        pause
        BAT_END

        # 创建Linux/Mac脚本
        cat > make_boot.sh << 'SH_END'
        #!/bin/bash
        echo "KernelSU Boot.img 制作工具 (Linux/Mac)"
        echo "======================================"
        echo ""

        if [ ! -f boot.img ]; then
          echo "错误: 请先将原版boot.img放到本目录"
          exit 1
        fi

        echo "[1/3] 解包boot.img..."
        ./magiskboot unpack boot.img

        echo "[2/3] 替换为KernelSU内核..."
        cp Image.gz-dtb kernel

        echo "[3/3] 重新打包..."
        ./magiskboot repack boot.img

        echo ""
        echo "完成! 生成文件: new-boot.img"
        echo ""
        echo "刷入方法:"
        echo "  adb reboot bootloader"
        echo "  fastboot flash boot new-boot.img"
        echo "  fastboot reboot"
        SH_END
        chmod +x make_boot.sh

        # 创建说明文档
        cat > 使用说明.txt << 'DOC_END'
        KernelSU内核 for 红米Note 10 (camellia)
        ========================================

        【文件说明】
        - Image.gz-dtb    : KernelSU内核文件
        - magiskboot      : Boot镜像处理工具
        - make_boot.sh    : Linux/Mac制作脚本
        - make_boot.bat   : Windows制作脚本

        【使用步骤】

        1. 提取手机的原版boot.img:
           adb shell su -c "dd if=/dev/block/by-name/boot of=/sdcard/boot.img"
           adb pull /sdcard/boot.img

        2. 将boot.img放到本目录

        3. 运行制作脚本:
           - Windows: 双击 make_boot.bat
           - Linux/Mac: 运行 ./make_boot.sh

        4. 刷入new-boot.img:
           adb reboot bootloader
           fastboot flash boot new-boot.img
           fastboot reboot

        5. 安装KernelSU管理器:
           https://github.com/tiann/KernelSU/releases

        【注意事项】
        ⚠️ 刷入前必须备份原版boot.img
        ⚠️ 需要解锁Bootloader
        ⚠️ KernelSU将替代原有的Magisk/Kitsune Mask
        ⚠️ 首次刷入建议清除数据

        【救砖方法】
        如果无法开机，进入fastboot模式刷回原版:
        fastboot flash boot boot_backup.img
        DOC_END

    - name: 上传编译结果
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Camellia-${{ github.run_number }}
        path: |
          /home/runner/output/

    - name: 生成摘要报告
      run: |
        echo "# ✅ KernelSU内核编译成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 设备信息" >> $GITHUB_STEP_SUMMARY
        echo "- **型号**: 红米Note 10 (camellia)" >> $GITHUB_STEP_SUMMARY
        echo "- **处理器**: MediaTek Dimensity 700" >> $GITHUB_STEP_SUMMARY
        echo "- **Android**: 11 (R)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 编译信息" >> $GITHUB_STEP_SUMMARY
        echo "- **内核大小**: $(ls -lh $HOME/output/Image.gz-dtb | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- **编译时间**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- **构建编号**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 下载说明" >> $GITHUB_STEP_SUMMARY
        echo "1. 点击上方 **KernelSU-Camellia-${{ github.run_number }}** 下载" >> $GITHUB_STEP_SUMMARY
        echo "2. 解压后查看《使用说明.txt》" >> $GITHUB_STEP_SUMMARY
        echo "3. 使用提供的脚本制作boot.img" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ 重要提醒" >> $GITHUB_STEP_SUMMARY
        echo "- 这是KernelSU内核，不是Magisk" >> $GITHUB_STEP_SUMMARY
        echo "- 刷入前务必备份原版boot.img" >> $GITHUB_STEP_SUMMARY
        echo "- 需要安装KernelSU管理器APP" >> $GITHUB_STEP_SUMMARY
