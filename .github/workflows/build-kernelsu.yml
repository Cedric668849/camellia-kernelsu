name: Build Minimal KernelSU Kernel

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 120

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 清理磁盘空间
      run: |
        sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY" /usr/local/lib/android
        sudo apt-get clean && sudo apt-get autoremove -y
        df -h

    - name: 安装依赖
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential curl flex git libssl-dev wget \
          gcc-aarch64-linux-gnu python3 device-tree-compiler

    - name: 下载源码
      run: |
        cd $HOME
        wget -q --show-progress https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip -O kernel.zip || \
        wget -q --show-progress https://ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip -O kernel.zip
        unzip -q kernel.zip && mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel && rm kernel.zip

        wget -q --show-progress https://github.com/tiann/KernelSU/archive/refs/heads/main.zip -O ksu.zip || \
        wget -q --show-progress https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/heads/main.zip -O ksu.zip
        unzip -q ksu.zip && mv KernelSU-* KernelSU && rm ksu.zip

    - name: 集成KernelSU
      run: |
        cd $HOME/kernel
        cp -r $HOME/KernelSU/kernel drivers/kernelsu
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig

    - name: 激进禁用所有问题驱动
      run: |
        cd $HOME/kernel

        echo "===== 禁用所有编译失败的驱动 ====="

        # 禁用整个CPUIDLE子系统
        rm -rf drivers/cpuidle/*
        echo "# CPUIDLE disabled" > drivers/cpuidle/Makefile
        echo "# CPUIDLE disabled" > drivers/cpuidle/Kconfig

        # 禁用MediaTek时钟调试
        rm -f drivers/clk/mediatek/clkdbg*.c
        sed -i '/clkdbg/d' drivers/clk/mediatek/Makefile

        # 禁用block加密
        rm -f block/blk-crypto.c block/bio-crypt-ctx.c
        sed -i '/blk-crypto/d' block/Makefile
        sed -i '/bio-crypt-ctx/d' block/Makefile

        # 禁用SDCARD FS
        rm -rf fs/sdcardfs
        sed -i '/sdcardfs/d' fs/Makefile
        sed -i '/sdcardfs/d' fs/Kconfig

        # 禁用DEVFREQ
        rm -rf drivers/devfreq
        echo "# DEVFREQ disabled" > drivers/devfreq/Makefile

        # 禁用设备树（使用预编译的）
        echo "# DTB disabled" > arch/arm64/boot/dts/Makefile

        echo "===== 驱动禁用完成 ====="

    - name: 极简配置
      run: |
        cd $HOME/kernel
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-

        make camellia_defconfig

        # 禁用所有问题配置
        cat >> .config << 'EOF'
        # 禁用编译失败的功能
        CONFIG_CPU_IDLE=n
        CONFIG_PM_DEVFREQ=n
        CONFIG_SDCARD_FS=n
        CONFIG_BLK_INLINE_ENCRYPTION=n
        CONFIG_FS_ENCRYPTION_INLINE_CRYPT=n
        CONFIG_COMMON_CLK_MT6833=n
        CONFIG_CC_STACKPROTECTOR_STRONG=n
        CONFIG_CC_STACKPROTECTOR=n

        # 启用KernelSU
        CONFIG_KPROBES=y
        CONFIG_HAVE_KPROBES=y
        CONFIG_KPROBE_EVENTS=y
        CONFIG_KSU=y
        EOF

        make olddefconfig

    - name: 编译内核
      run: |
        cd $HOME/kernel
        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KCFLAGS="-w"

        echo "开始编译..."
        make -j$(nproc) Image 2>&1 | tee build.log

        # 检查结果
        if [ -f arch/arm64/boot/Image ]; then
          echo "✅ Image编译成功"

          # 手动压缩
          gzip -c arch/arm64/boot/Image > arch/arm64/boot/Image.gz

          # 创建假的dtb（如果真的需要，从ROM提取）
          echo "FAKE_DTB" > fake.dtb
          cat arch/arm64/boot/Image.gz fake.dtb > arch/arm64/boot/Image.gz-dtb

          ls -lh arch/arm64/boot/Image*
        else
          echo "❌ 编译失败"
          tail -n 200 build.log
          exit 1
        fi

    - name: 打包
      run: |
        mkdir -p output

        if [ -f "$HOME/kernel/arch/arm64/boot/Image.gz-dtb" ]; then
          cp "$HOME/kernel/arch/arm64/boot/Image.gz-dtb" output/
        elif [ -f "$HOME/kernel/arch/arm64/boot/Image" ]; then
          cp "$HOME/kernel/arch/arm64/boot/Image" output/Image.gz-dtb
        fi

        cd output
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk
        unzip -q -j Magisk-26.4.apk 'lib/x86_64/libmagiskboot.so'
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-26.4.apk

        cat > make_boot.sh << 'EOF'
        #!/bin/bash
        echo "KernelSU极简内核打包工具"
        echo "注意：这是实验性内核，禁用了省电功能"

        if [ ! -f boot.img ]; then
          echo "错误：需要原版boot.img"
          exit 1
        fi

        ./magiskboot unpack boot.img
        cp Image.gz-dtb kernel
        ./magiskboot repack boot.img

        echo "完成：new-boot.img"
        echo ""
        echo "⚠️ 警告："
        echo "1. 此内核禁用了CPUIDLE（省电功能）"
        echo "2. 可能耗电增加"
        echo "3. 但应该能正常启动"
        EOF
        chmod +x make_boot.sh

        cat > README.txt << 'EOF'
        KernelSU极简内核 - 红米Note 10

        ⚠️ 重要说明 ⚠️
        这是极简版内核，为了编译成功禁用了：
        - CPUIDLE（CPU空闲管理）- 可能更耗电
        - DEVFREQ（动态频率调节）- 性能可能不如原版
        - SDCARD_FS（外置SD卡文件系统）- 如果用外置SD卡会有问题
        - Block层加密（不影响普通使用）

        ✅ 保留的功能：
        - KernelSU root
        - 基本系统功能
        - 所有核心驱动

        使用前请确保：
        1. 已备份原版boot.img
        2. 理解可能更耗电
        3. 准备好救砖工具

        刷入方法：
        1. 放入原版boot.img
        2. 运行./make_boot.sh
        3. fastboot flash boot new-boot.img
        EOF

    - name: 上传
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Minimal-Camellia
        path: output/

    - name: 摘要
      run: |
        echo "# ⚠️ 极简版KernelSU内核编译完成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 警告" >> $GITHUB_STEP_SUMMARY
        echo "这是实验性内核，禁用了以下功能以确保编译成功：" >> $GITHUB_STEP_SUMMARY
        echo "- CPU空闲管理（可能更耗电）" >> $GITHUB_STEP_SUMMARY
        echo "- 动态频率调节" >> $GITHUB_STEP_SUMMARY
        echo "- SD卡文件系统" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 使用建议" >> $GITHUB_STEP_SUMMARY
        echo "1. 仅用于测试KernelSU功能" >> $GITHUB_STEP_SUMMARY
        echo "2. 不建议日常使用（耗电）" >> $GITHUB_STEP_SUMMARY
        echo "3. 测试改机效果后可以尝试优化" >> $GITHUB_STEP_SUMMARY
