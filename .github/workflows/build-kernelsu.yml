name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 清理磁盘空间
      run: |
        echo "===== 清理前磁盘使用 ====="
        df -h

        echo "清理不需要的软件..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules

        echo "清理APT缓存..."
        sudo apt-get clean
        sudo apt-get autoremove -y

        echo "===== 清理后磁盘使用 ====="
        df -h
        echo "可用空间: $(df -h / | awk 'NR==2 {print $4}')"

    - name: 安装编译依赖
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

        echo "GCC版本:"
        aarch64-linux-gnu-gcc --version

    - name: 设置ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: "2G"

    - name: 下载内核源码（使用压缩包）
      run: |
        cd $HOME
        echo "开始下载内核源码压缩包..."

        # 直接下载ZIP压缩包
        wget -q --show-progress --timeout=300 \
          https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
          -O kernel.zip || {
            echo "GitHub下载失败，尝试加速链接..."
            wget -q --show-progress --timeout=300 \
              https://ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
              -O kernel.zip || {
                echo "再次尝试镜像..."
                wget -q --show-progress --timeout=300 \
                  https://gh.api.99988866.xyz/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
                  -O kernel.zip
              }
          }

        echo "解压内核源码..."
        unzip -q kernel.zip
        mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel
        rm kernel.zip

        echo "内核源码准备完成"
        ls -la kernel/

    - name: 下载KernelSU
      run: |
        cd $HOME
        echo "下载KernelSU..."

        if [ -n "${{ github.event.inputs.kernelsu_version }}" ]; then
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/tags/${{ github.event.inputs.kernelsu_version }}.zip \
            -O kernelsu.zip || \
          wget -q --show-progress \
            https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/tags/${{ github.event.inputs.kernelsu_version }}.zip \
            -O kernelsu.zip
        else
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
            -O kernelsu.zip || \
          wget -q --show-progress \
            https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
            -O kernelsu.zip
        fi

        unzip -q kernelsu.zip
        mv KernelSU-* KernelSU
        rm kernelsu.zip

        echo "KernelSU准备完成"
        ls -la KernelSU/kernel/

    - name: 集成KernelSU到内核
      run: |
        cd $HOME/kernel

        # 复制KernelSU模块到内核
        cp -r $HOME/KernelSU/kernel drivers/kernelsu

        # 验证
        if [ -d "drivers/kernelsu" ]; then
          echo "✅ KernelSU集成成功"
          ls -la drivers/kernelsu/
        else
          echo "❌ KernelSU集成失败"
          exit 1
        fi

        # 修改Makefile
        if ! grep -q "kernelsu" drivers/Makefile; then
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo "已添加KernelSU到Makefile"
        fi

        # 修改Kconfig
        if ! grep -q "kernelsu" drivers/Kconfig; then
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
          echo "已添加KernelSU到Kconfig"
        fi

        echo "KernelSU集成配置完成"

    - name: 精确修复头文件问题
      run: |
        cd $HOME/kernel

        echo "===== 开始精确修复头文件问题 ====="

        # 修复具体的文件，避免误伤
        echo "修复fs/sdcardfs/dentry.c..."
        if [ -f "fs/sdcardfs/dentry.c" ]; then
          # 只修复特定的错误行
          sed -i 's/#include <linux\/ctype\.h"/#include <linux\/ctype.h>/g' fs/sdcardfs/dentry.c
        fi

        echo "修复drivers/cpuidle/cpuidle.c..."
        if [ -f "drivers/cpuidle/cpuidle.c" ]; then
          # 只修复特定的错误行
          sed -i 's/#include <linux\/clockchips\.h"/#include <linux\/clockchips.h>/g' drivers/cpuidle/cpuidle.c
        fi

        echo "修复drivers/clk/mediatek/clkdbg-mt6833.c..."
        if [ -f "drivers/clk/mediatek/clkdbg-mt6833.c" ]; then
          sed -i 's/#include <clk-mux\.h>/#include "clk-mux.h"/g' drivers/clk/mediatek/clkdbg-mt6833.c
        fi

        echo "修复drivers/cpuidle/cpuidle-mediatek.c..."
        if [ -f "drivers/cpuidle/cpuidle-mediatek.c" ]; then
          sed -i 's/#include <dt_idle_states\.h>/#include "dt_idle_states.h"/g' drivers/cpuidle/cpuidle-mediatek.c
        fi

        echo "修复drivers/devfreq/helio-dvfsrc-v3/helio-dvfsrc-qos.c..."
        if [ -f "drivers/devfreq/helio-dvfsrc-v3/helio-dvfsrc-qos.c" ]; then
          sed -i 's/#include <helio-dvfsrc-qos\.h>/#include "helio-dvfsrc-qos.h"/g' drivers/devfreq/helio-dvfsrc-v3/helio-dvfsrc-qos.c
        fi

        # 查找并修复所有损坏的头文件引用（结尾是"而不是>）
        echo "查找并修复所有损坏的头文件引用..."
        find . -name "*.c" -type f | while read file; do
          # 修复以"结尾的include语句
          if grep -q '#include.*\.h"$' "$file"; then
            echo "修复文件: $file"
            # 备份原文件
            cp "$file" "${file}.bak"
            # 修复错误的引号
            sed -i 's/#include <\([^>]*\)\.h"/#include <\1.h>/g' "$file"
            sed -i 's/#include "\([^"]*\)\.h"/#include "\1.h"/g' "$file"
          fi
        done

        echo "===== 头文件修复完成 ====="

    - name: 配置内核（最小化配置）
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-

        # 使用camellia默认配置
        echo "应用默认配置..."
        make camellia_defconfig

        echo "===== 开始最小化配置 ====="

        # 禁用所有可能有问题的可选功能
        echo "禁用SDCARD FS..."
        scripts/config --disable CONFIG_SDCARD_FS

        echo "禁用MT6833时钟驱动..."
        scripts/config --disable CONFIG_COMMON_CLK_MT6833
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_AUDIO
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_CAMSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_IMGSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_IPESYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MDPSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MFGCFG
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MMSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_VDECSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_VENCSYS

        echo "禁用CPUIDLE..."
        scripts/config --disable CONFIG_CPU_IDLE
        scripts/config --disable CONFIG_CPU_IDLE_GOV_LADDER
        scripts/config --disable CONFIG_CPU_IDLE_GOV_MENU
        scripts/config --disable CONFIG_MTK_IDLE_BALANCE_ENHANCEMENT
        scripts/config --disable CONFIG_MTK_CPUIDLE
        scripts/config --disable CONFIG_ARM_CPUIDLE

        echo "禁用DVFSRC..."
        scripts/config --disable CONFIG_MTK_DVFSRC
        scripts/config --disable CONFIG_MTK_DVFSRC_DEVFREQ
        scripts/config --disable CONFIG_HELIO_DVFSRC_V3
        scripts/config --disable CONFIG_ARM_MT6833_CPUFREQ
        scripts/config --disable CONFIG_ARM_MEDIATEK_CPUFREQ

        echo "禁用DEVFREQ..."
        scripts/config --disable CONFIG_PM_DEVFREQ
        scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
        scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
        scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
        scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
        scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE

        # 禁用栈保护
        echo "禁用栈保护..."
        scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
        scripts/config --disable CONFIG_CC_STACKPROTECTOR
        scripts/config --disable CONFIG_STACKPROTECTOR
        scripts/config --disable CONFIG_STACKPROTECTOR_STRONG

        # 启用KernelSU需要的选项
        echo "启用KernelSU..."
        scripts/config --enable CONFIG_KPROBES
        scripts/config --enable CONFIG_HAVE_KPROBES
        scripts/config --enable CONFIG_KPROBE_EVENTS
        scripts/config --enable CONFIG_MODULES
        scripts/config --enable CONFIG_MODULE_UNLOAD
        scripts/config --enable CONFIG_MODULE_FORCE_UNLOAD

        # 添加KernelSU配置
        echo "CONFIG_KSU=y" >> .config
        echo "CONFIG_KSU_DEBUG=n" >> .config

        # 更新配置
        make olddefconfig

        echo "===== 配置完成 ====="
        echo "验证关键配置:"
        echo "KernelSU: $(grep CONFIG_KSU=y .config && echo '已启用' || echo '未启用')"
        echo "KPROBES: $(grep CONFIG_KPROBES=y .config && echo '已启用' || echo '未启用')"
        echo "SDCARD_FS: $(grep CONFIG_SDCARD_FS .config || echo '已禁用')"
        echo "CPU_IDLE: $(grep CONFIG_CPU_IDLE .config || echo '已禁用')"

    - name: 编译内核
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export KCFLAGS="-w"
        export CONFIG_CC_STACKPROTECTOR_STRONG=n

        echo "开始编译内核 (使用 $(nproc) 线程)..."
        echo "预计需要15-25分钟..."
        echo "================="

        # 清理之前的编译
        make mrproper

        # 重新配置（因为mrproper会清除配置）
        make camellia_defconfig
        echo "CONFIG_KSU=y" >> .config
        make olddefconfig

        # 编译内核镜像
        make -j$(nproc) Image.gz-dtb 2>&1 | tee compile.log | tail -n 100

        # 检查编译结果
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          echo "================="
          echo "✅ 内核编译成功!"
          ls -lh arch/arm64/boot/Image.gz-dtb
        else
          echo "================="
          echo "❌ 内核编译失败"
          echo "显示最后100行编译日志："
          tail -n 100 compile.log
          echo "尝试查找可能的内核文件..."
          find . -name "Image*" -type f 2>/dev/null | head -20
          exit 1
        fi

    - name: 打包编译产物
      run: |
        mkdir -p $HOME/output

        # 复制内核
        cp $HOME/kernel/arch/arm64/boot/Image.gz-dtb $HOME/output/
        echo "内核文件大小: $(ls -lh $HOME/output/Image.gz-dtb | awk '{print $5}')"

        # 下载boot.img处理工具
        cd $HOME/output
        echo "下载boot.img处理工具..."
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk || \
        wget -q https://ghproxy.com/https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk

        unzip -q -j Magisk-26.4.apk 'lib/x86_64/libmagiskboot.so'
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-26.4.apk

        # 创建使用脚本
        cat > make_boot.sh << 'SCRIPT_END'
        #!/bin/bash
        echo "KernelSU Boot.img 制作工具"
        echo "========================="

        if [ ! -f boot.img ]; then
          echo "错误: 请先放入原版boot.img"
          exit 1
        fi

        ./magiskboot unpack boot.img
        cp Image.gz-dtb kernel
        ./magiskboot repack boot.img

        echo "完成! 生成: new-boot.img"
        echo "刷入: fastboot flash boot new-boot.img"
        SCRIPT_END
        chmod +x make_boot.sh

        # 创建说明文件
        cat > README.txt << 'README_END'
        KernelSU内核 - 红米Note 10 (camellia)
        ====================================

        使用步骤:
        1. 备份原版boot.img
        2. 将boot.img放入本目录
        3. 运行 ./make_boot.sh
        4. 刷入 new-boot.img
        5. 安装KernelSU管理器

        KernelSU管理器下载:
        https://github.com/tiann/KernelSU/releases
        README_END

    - name: 上传编译结果
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Camellia-${{ github.run_number }}
        path: |
          /home/runner/output/

    - name: 生成摘要报告
      run: |
        echo "# ✅ KernelSU内核编译成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 红米Note 10 (camellia)" >> $GITHUB_STEP_SUMMARY
        echo "- 内核大小: $(ls -lh $HOME/output/Image.gz-dtb | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- 构建号: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 下载后:" >> $GITHUB_STEP_SUMMARY
        echo "1. 解压文件" >> $GITHUB_STEP_SUMMARY
        echo "2. 查看README.txt" >> $GITHUB_STEP_SUMMARY
        echo "3. 使用make_boot.sh制作boot.img" >> $GITHUB_STEP_SUMMARY
        echo "4. 刷入并安装KernelSU管理器" >> $GITHUB_STEP_SUMMARY
