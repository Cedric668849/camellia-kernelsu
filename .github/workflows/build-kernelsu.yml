name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 90

    steps:
    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 清理磁盘空间
      run: |
        echo "===== 清理前磁盘使用 ====="
        df -h

        echo "清理不需要的软件..."
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo rm -rf /usr/local/graalvm/
        sudo rm -rf /usr/local/share/powershell
        sudo rm -rf /usr/local/share/chromium
        sudo rm -rf /usr/local/lib/node_modules

        echo "清理APT缓存..."
        sudo apt-get clean
        sudo apt-get autoremove -y

        echo "===== 清理后磁盘使用 ====="
        df -h
        echo "可用空间: $(df -h / | awk 'NR==2 {print $4}')"

    - name: 安装编译依赖
      run: |
        sudo apt update
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

        echo "GCC版本:"
        aarch64-linux-gnu-gcc --version

    - name: 设置ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: "2G"

    - name: 下载内核源码（使用压缩包）
      run: |
        cd $HOME
        echo "开始下载内核源码压缩包..."

        # 直接下载ZIP压缩包
        wget -q --show-progress --timeout=300 \
          https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
          -O kernel.zip || {
            echo "GitHub下载失败，尝试加速链接..."
            wget -q --show-progress --timeout=300 \
              https://ghproxy.com/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
              -O kernel.zip || {
                echo "再次尝试镜像..."
                wget -q --show-progress --timeout=300 \
                  https://gh.api.99988866.xyz/https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip \
                  -O kernel.zip
              }
          }

        echo "解压内核源码..."
        unzip -q kernel.zip
        mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel
        rm kernel.zip

        echo "内核源码准备完成"
        ls -la kernel/

    - name: 下载KernelSU
      run: |
        cd $HOME
        echo "下载KernelSU..."

        if [ -n "${{ github.event.inputs.kernelsu_version }}" ]; then
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/tags/${{ github.event.inputs.kernelsu_version }}.zip \
            -O kernelsu.zip || \
          wget -q --show-progress \
            https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/tags/${{ github.event.inputs.kernelsu_version }}.zip \
            -O kernelsu.zip
        else
          wget -q --show-progress \
            https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
            -O kernelsu.zip || \
          wget -q --show-progress \
            https://ghproxy.com/https://github.com/tiann/KernelSU/archive/refs/heads/main.zip \
            -O kernelsu.zip
        fi

        unzip -q kernelsu.zip
        mv KernelSU-* KernelSU
        rm kernelsu.zip

        echo "KernelSU准备完成"
        ls -la KernelSU/kernel/

    - name: 集成KernelSU到内核
      run: |
        cd $HOME/kernel

        # 复制KernelSU模块到内核
        cp -r $HOME/KernelSU/kernel drivers/kernelsu

        # 验证
        if [ -d "drivers/kernelsu" ]; then
          echo "✅ KernelSU集成成功"
          ls -la drivers/kernelsu/
        else
          echo "❌ KernelSU集成失败"
          exit 1
        fi

        # 修改Makefile
        if ! grep -q "kernelsu" drivers/Makefile; then
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo "已添加KernelSU到Makefile"
        fi

        # 修改Kconfig
        if ! grep -q "kernelsu" drivers/Kconfig; then
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
          echo "已添加KernelSU到Kconfig"
        fi

        echo "KernelSU集成配置完成"

    - name: 全面修复MediaTek头文件问题
      run: |
        cd $HOME/kernel

        echo "===== 开始全面修复头文件包含问题 ====="

        # 查找所有有问题的头文件包含
        echo "查找所有使用尖括号的本地头文件..."

        # 修复clk-mux.h
        find . -name "*.c" -exec grep -l "#include <clk-mux.h>" {} \; | while read file; do
          echo "修复: $file"
          sed -i 's|#include <clk-mux.h>|#include "clk-mux.h"|g' "$file"
        done

        # 修复dt_idle_states.h
        find . -name "*.c" -exec grep -l "#include <dt_idle_states.h>" {} \; | while read file; do
          echo "修复: $file"
          sed -i 's|#include <dt_idle_states.h>|#include "dt_idle_states.h"|g' "$file"
        done

        # 修复helio-dvfsrc-qos.h
        find . -name "*.c" -exec grep -l "#include <helio-dvfsrc-qos.h>" {} \; | while read file; do
          echo "修复: $file"
          sed -i 's|#include <helio-dvfsrc-qos.h>|#include "helio-dvfsrc-qos.h"|g' "$file"
        done

        # 修复其他MediaTek特定头文件
        echo "修复其他MediaTek头文件..."

        # 通用修复：将所有本地头文件的尖括号改为引号
        find drivers/clk/mediatek -name "*.c" -exec sed -i 's|#include <\(.*\)>|#include "\1"|g' {} \; 2>/dev/null || true
        find drivers/cpuidle -name "*.c" -exec sed -i 's|#include <\(.*\)>|#include "\1"|g' {} \; 2>/dev/null || true
        find drivers/devfreq -name "*.c" -exec sed -i 's|#include <\(.*\)>|#include "\1"|g' {} \; 2>/dev/null || true

        # 恢复系统头文件（避免误改）
        find . -name "*.c" -exec sed -i 's|#include "linux/|#include <linux/|g' {} \; 2>/dev/null || true
        find . -name "*.c" -exec sed -i 's|#include "asm/|#include <asm/|g' {} \; 2>/dev/null || true
        find . -name "*.c" -exec sed -i 's|#include "net/|#include <net/|g' {} \; 2>/dev/null || true
        find . -name "*.c" -exec sed -i 's|#include "uapi/|#include <uapi/|g' {} \; 2>/dev/null || true

        echo "===== 头文件修复完成 ====="

    - name: 配置内核（禁用问题驱动）
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-

        # 使用camellia默认配置
        echo "应用默认配置..."
        make camellia_defconfig

        echo "===== 开始禁用问题驱动 ====="

        # 禁用MT6833相关驱动（camellia使用的是定制版，不需要标准MT6833驱动）
        echo "禁用MT6833时钟驱动..."
        scripts/config --disable CONFIG_COMMON_CLK_MT6833
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_AUDIO
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_CAMSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_IMGSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_IPESYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MDPSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MFGCFG
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_MMSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_VDECSYS
        scripts/config --disable CONFIG_COMMON_CLK_MT6833_VENCSYS

        # 禁用有问题的CPUIDLE驱动
        echo "禁用CPUIDLE相关驱动..."
        scripts/config --disable CONFIG_MTK_IDLE_BALANCE_ENHANCEMENT
        scripts/config --disable CONFIG_MTK_CPUIDLE

        # 禁用DVFSRC相关驱动（有编译问题）
        echo "禁用DVFSRC驱动..."
        scripts/config --disable CONFIG_MTK_DVFSRC
        scripts/config --disable CONFIG_MTK_DVFSRC_DEVFREQ
        scripts/config --disable CONFIG_HELIO_DVFSRC_V3
        scripts/config --disable CONFIG_ARM_MT6833_CPUFREQ
        scripts/config --disable CONFIG_ARM_MEDIATEK_CPUFREQ

        # 禁用devfreq相关（如果还有问题）
        echo "禁用DEVFREQ驱动..."
        scripts/config --disable CONFIG_PM_DEVFREQ
        scripts/config --disable CONFIG_DEVFREQ_GOV_SIMPLE_ONDEMAND
        scripts/config --disable CONFIG_DEVFREQ_GOV_PERFORMANCE
        scripts/config --disable CONFIG_DEVFREQ_GOV_POWERSAVE
        scripts/config --disable CONFIG_DEVFREQ_GOV_USERSPACE
        scripts/config --disable CONFIG_DEVFREQ_GOV_PASSIVE

        # 禁用栈保护（避免编译器兼容问题）
        echo "禁用栈保护..."
        scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
        scripts/config --disable CONFIG_CC_STACKPROTECTOR
        scripts/config --disable CONFIG_STACKPROTECTOR
        scripts/config --disable CONFIG_STACKPROTECTOR_STRONG

        # 启用KernelSU需要的选项
        echo "启用KernelSU..."
        scripts/config --enable CONFIG_KPROBES
        scripts/config --enable CONFIG_HAVE_KPROBES
        scripts/config --enable CONFIG_KPROBE_EVENTS
        scripts/config --enable CONFIG_MODULES
        scripts/config --enable CONFIG_MODULE_UNLOAD
        scripts/config --enable CONFIG_MODULE_FORCE_UNLOAD

        # 添加KernelSU配置
        echo "CONFIG_KSU=y" >> .config
        echo "CONFIG_KSU_DEBUG=n" >> .config

        # 更新配置
        make olddefconfig

        echo "===== 内核配置完成 ====="
        echo "验证关键配置:"
        echo "KernelSU: $(grep CONFIG_KSU=y .config && echo '已启用' || echo '未启用')"
        echo "KPROBES: $(grep CONFIG_KPROBES=y .config && echo '已启用' || echo '未启用')"
        echo "DVFSRC: $(grep CONFIG_MTK_DVFSRC .config || echo '已禁用')"
        echo "DEVFREQ: $(grep CONFIG_PM_DEVFREQ .config || echo '已禁用')"
        echo "MT6833: $(grep CONFIG_COMMON_CLK_MT6833 .config || echo '已禁用')"

    - name: 编译内核
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export KCFLAGS="-w"
        export CONFIG_CC_STACKPROTECTOR_STRONG=n

        echo "开始编译内核 (使用 $(nproc) 线程)..."
        echo "预计需要15-25分钟..."
        echo "================="

        # 清理之前的编译（如果有）
        make clean

        # 编译内核镜像
        make -j$(nproc) Image.gz-dtb 2>&1 | tee compile.log | tail -n 100

        # 检查编译结果
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          echo "================="
          echo "✅ 内核编译成功!"
          ls -lh arch/arm64/boot/Image.gz-dtb
        else
          echo "================="
          echo "❌ 内核编译失败"
          echo "显示最后50行编译日志："
          tail -n 50 compile.log
          echo "尝试查找可能的内核文件..."
          find arch/arm64/boot/ -name "Image*" -type f
          exit 1
        fi

    - name: 打包编译产物
      run: |
        mkdir -p $HOME/output

        # 复制内核
        cp $HOME/kernel/arch/arm64/boot/Image.gz-dtb $HOME/output/
        echo "内核文件大小: $(ls -lh $HOME/output/Image.gz-dtb | awk '{print $5}')"

        # 下载boot.img处理工具
        cd $HOME/output
        echo "下载boot.img处理工具..."
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk || \
        wget -q https://ghproxy.com/https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk

        unzip -q -j Magisk-26.4.apk 'lib/x86_64/libmagiskboot.so'
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-26.4.apk

        # 创建Windows批处理脚本
        cat > make_boot.bat << 'BAT_END'
        @echo off
        chcp 65001 >nul
        echo =====================================
        echo  KernelSU Boot.img 制作工具 (Windows)
        echo =====================================
        echo.
        echo 注意：这是KernelSU内核，不是Magisk！
        echo.

        if not exist boot.img (
          echo [错误] 请先将原版boot.img放到本目录
          echo.
          echo 获取boot.img的方法：
          echo 1. 使用ADB命令：
          echo    adb shell su -c "dd if=/dev/block/by-name/boot of=/sdcard/boot.img"
          echo    adb pull /sdcard/boot.img
          echo 2. 或从官方ROM包中提取
          echo.
          pause
          exit /b 1
        )

        echo [1/3] 解包boot.img...
        magiskboot.exe unpack boot.img
        if errorlevel 1 goto error

        echo [2/3] 替换为KernelSU内核...
        copy /Y Image.gz-dtb kernel
        if errorlevel 1 goto error

        echo [3/3] 重新打包...
        magiskboot.exe repack boot.img
        if errorlevel 1 goto error

        echo.
        echo ✅ 成功！生成文件: new-boot.img
        echo.
        echo 刷入步骤:
        echo 1. adb reboot bootloader
        echo 2. fastboot flash boot new-boot.img
        echo 3. fastboot reboot
        echo.
        echo 刷入后请安装KernelSU管理器
        pause
        exit /b 0

        :error
        echo.
        echo ❌ 出错了！请检查文件是否完整
        pause
        exit /b 1
        BAT_END

        # 创建Linux/Mac脚本
        cat > make_boot.sh << 'SH_END'
        #!/bin/bash
        echo "====================================="
        echo " KernelSU Boot.img 制作工具 (Linux/Mac)"
        echo "====================================="
        echo ""
        echo "注意：这是KernelSU内核，不是Magisk！"
        echo ""

        if [ ! -f boot.img ]; then
          echo "[错误] 请先将原版boot.img放到本目录"
          echo ""
          echo "获取boot.img的方法："
          echo "1. 使用ADB命令："
          echo '   adb shell su -c "dd if=/dev/block/by-name/boot of=/sdcard/boot.img"'
          echo "   adb pull /sdcard/boot.img"
          echo "2. 或从官方ROM包中提取"
          echo ""
          exit 1
        fi

        echo "[1/3] 解包boot.img..."
        ./magiskboot unpack boot.img || exit 1

        echo "[2/3] 替换为KernelSU内核..."
        cp Image.gz-dtb kernel || exit 1

        echo "[3/3] 重新打包..."
        ./magiskboot repack boot.img || exit 1

        echo ""
        echo "✅ 成功！生成文件: new-boot.img"
        echo ""
        echo "刷入步骤:"
        echo "1. adb reboot bootloader"
        echo "2. fastboot flash boot new-boot.img"
        echo "3. fastboot reboot"
        echo ""
        echo "刷入后请安装KernelSU管理器"
        SH_END
        chmod +x make_boot.sh

        # 创建详细说明文档
        cat > README_CN.txt << 'DOC_END'
        ========================================
          KernelSU内核 for 红米Note 10
                  (camellia)
        ========================================

        【重要说明】
        本内核集成了KernelSU，刷入后将替代原有的Magisk/Kitsune Mask
        magiskboot只是用来打包boot.img的工具，不包含Magisk

        【包含文件】
        ├── Image.gz-dtb    - KernelSU内核文件
        ├── magiskboot      - Boot镜像处理工具
        ├── make_boot.sh    - Linux/Mac制作脚本
        ├── make_boot.bat   - Windows制作脚本
        └── README_CN.txt   - 本说明文件

        【使用步骤】

        步骤1：备份原版boot.img
        -------------------------
        方法A - 使用ADB（需要当前root权限）：
          adb shell
          su
          dd if=/dev/block/by-name/boot of=/sdcard/boot_backup.img
          exit
          exit
          adb pull /sdcard/boot_backup.img

        方法B - 从官方ROM提取：
          下载官方线刷包，解压后找到boot.img

        步骤2：制作新boot.img
        -------------------------
        1. 将boot_backup.img复制到本目录并改名为boot.img
        2. 运行对应系统的脚本：
           - Windows: 双击 make_boot.bat
           - Linux/Mac: 终端运行 ./make_boot.sh
        3. 成功后会生成new-boot.img

        步骤3：刷入新内核
        -------------------------
        1. 进入Bootloader模式：
           adb reboot bootloader

        2. 刷入内核：
           fastboot flash boot new-boot.img

        3. 重启：
           fastboot reboot

        步骤4：安装KernelSU管理器
        -------------------------
        下载地址：https://github.com/tiann/KernelSU/releases
        安装最新版KernelSU.apk

        【注意事项】
        1. 刷入前务必备份原版boot.img！
        2. 需要已解锁Bootloader
        3. 首次刷入可能需要清除数据
        4. 原Magisk模块需要转换为KernelSU模块
        5. 如果刷入后无法开机，进入fastboot刷回原版：
           fastboot flash boot boot_backup.img

        【验证是否成功】
        1. 安装KernelSU管理器
        2. 打开应该显示"已安装"
        3. 版本号显示内核版本

        【常见问题】
        Q: 刷入后Magisk消失了？
        A: 正常，KernelSU替代了Magisk

        Q: 原来的Magisk模块还能用吗？
        A: 需要转换为KernelSU模块格式

        Q: 如何卸载KernelSU？
        A: 刷回原版boot.img即可

        ========================================
        编译时间: $(date '+%Y-%m-%d %H:%M:%S')
        ========================================
        DOC_END

    - name: 上传编译结果
      uses: actions/upload-artifact@v4
      with:
        name: KernelSU-Camellia-${{ github.run_number }}
        path: |
          /home/runner/output/

    - name: 生成摘要报告
      run: |
        echo "# ✅ KernelSU内核编译成功!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📱 设备信息" >> $GITHUB_STEP_SUMMARY
        echo "- **型号**: 红米Note 10 (camellia)" >> $GITHUB_STEP_SUMMARY
        echo "- **处理器**: MediaTek Dimensity 700" >> $GITHUB_STEP_SUMMARY
        echo "- **Android**: 11 (R)" >> $GITHUB_STEP_SUMMARY
        echo "- **分区类型**: VAB (Virtual A/B)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📦 编译信息" >> $GITHUB_STEP_SUMMARY
        echo "- **内核大小**: $(ls -lh $HOME/output/Image.gz-dtb | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- **编译时间**: $(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_STEP_SUMMARY
        echo "- **构建编号**: #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🚀 使用方法" >> $GITHUB_STEP_SUMMARY
        echo "1. 下载 **KernelSU-Camellia-${{ github.run_number }}.zip**" >> $GITHUB_STEP_SUMMARY
        echo "2. 解压并查看 **README_CN.txt**" >> $GITHUB_STEP_SUMMARY
        echo "3. 使用提供的脚本制作boot.img" >> $GITHUB_STEP_SUMMARY
        echo "4. 刷入并安装KernelSU管理器" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ⚠️ 重要提醒" >> $GITHUB_STEP_SUMMARY
        echo "- **这是KernelSU内核，会替代Magisk/Kitsune Mask**" >> $GITHUB_STEP_SUMMARY
        echo "- **刷入前务必备份原版boot.img**" >> $GITHUB_STEP_SUMMARY
        echo "- **需要解锁Bootloader**" >> $GITHUB_STEP_SUMMARY
        echo "- **下载KernelSU管理器**: [GitHub Releases](https://github.com/tiann/KernelSU/releases)" >> $GITHUB_STEP_SUMMARY
