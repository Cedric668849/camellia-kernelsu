name: Simple Kernel Build Test

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 60

    steps:
    - name: 安装基本依赖
      run: |
        sudo apt update
        sudo apt install -y bc bison build-essential flex git libssl-dev \
          gcc-aarch64-linux-gnu wget unzip python3

    - name: 下载并准备源码
      run: |
        cd $HOME

        # 下载内核源码
        wget -q --show-progress --timeout=60 \
          https://github.com/MiCode/Xiaomi_Kernel_OpenSource/archive/refs/heads/camellia-r-oss.zip
        unzip -q camellia-r-oss.zip
        mv Xiaomi_Kernel_OpenSource-camellia-r-oss kernel

        # 下载KernelSU
        wget -q --show-progress --timeout=60 \
          https://github.com/tiann/KernelSU/archive/refs/heads/main.zip
        unzip -q main.zip
        mv KernelSU-main KernelSU

        # 集成KernelSU
        cd kernel
        cp -r ../KernelSU/kernel drivers/kernelsu
        echo 'obj-y += kernelsu/' >> drivers/Makefile

    - name: 尝试最基本的编译
      run: |
        cd $HOME/kernel

        export ARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export KCFLAGS="-w"

        # 生成配置
        make camellia_defconfig

        # 禁用所有可能有问题的功能
        ./scripts/config --disable CONFIG_CPU_IDLE
        ./scripts/config --disable CONFIG_PM_DEVFREQ
        ./scripts/config --disable CONFIG_BLK_INLINE_ENCRYPTION
        ./scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
        ./scripts/config --disable CONFIG_COMMON_CLK_MT6833
        ./scripts/config --enable CONFIG_KSU

        make olddefconfig

        # 尝试编译（只编译核心）
        echo "开始编译..."
        make -j2 Image 2>&1 | head -500

        # 检查结果
        echo ""
        echo "===== 检查编译结果 ====="

        if [ -f arch/arm64/boot/Image ]; then
          echo "✅ 成功！找到Image"
          ls -lh arch/arm64/boot/Image
        elif [ -f vmlinux ]; then
          echo "⚠️ 只有vmlinux"
          ls -lh vmlinux
        else
          echo "❌ 编译失败"
          echo "查找.o文件..."
          find . -name "*.o" -type f | wc -l
        fi

    - name: 打包结果（无需外部工具）
      run: |
        mkdir output

        # 如果有内核文件，复制
        if [ -f "$HOME/kernel/arch/arm64/boot/Image" ]; then
          cp "$HOME/kernel/arch/arm64/boot/Image" output/
          echo "内核编译成功！" > output/SUCCESS.txt
        else
          echo "编译失败" > output/FAILED.txt
          # 复制一些日志
          tail -500 $HOME/kernel/build.log > output/build_error.log 2>/dev/null || true
        fi

        # 创建简单说明
        cat > output/README.txt << 'EOF'
        编译测试结果

        如果有Image文件：编译成功
        如果只有FAILED.txt：编译失败

        后续步骤（如果成功）：
        1. 下载Image文件
        2. 自行使用magiskboot打包
        3. 刷入测试
        EOF

    - name: 上传结果
      uses: actions/upload-artifact@v4
      with:
        name: Build-Result
        path: output/
