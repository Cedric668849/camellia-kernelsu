name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
    - name: 最大化构建空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装编译依赖
      run: |
        sudo apt update

        # 安装基础编译工具
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget

        # 安装ARM64交叉编译工具链
        sudo apt install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

        # 验证GCC版本
        aarch64-linux-gnu-gcc --version

    - name: 设置ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: "2G"

    - name: 设置工作目录
      run: |
        mkdir -p $HOME/kernel_build
        echo "KERNEL_DIR=$HOME/kernel_build" >> $GITHUB_ENV

    - name: 克隆内核源码
      run: |
        cd $HOME/kernel_build
        git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b camellia-r-oss kernel --depth=1
        echo "内核源码克隆完成"
        ls -la kernel/

    - name: 克隆KernelSU
      run: |
        cd $HOME/kernel_build
        if [ -n "${{ github.event.inputs.kernelsu_version }}" ]; then
          git clone https://github.com/tiann/KernelSU.git -b ${{ github.event.inputs.kernelsu_version }} --depth=1
        else
          git clone https://github.com/tiann/KernelSU.git --depth=1
        fi
        cd KernelSU
        echo "KernelSU版本: $(git describe --tags --always)"
        cd ..
        echo "检查KernelSU内核模块:"
        ls -la KernelSU/kernel/

    - name: 集成KernelSU到内核
      run: |
        cd $HOME/kernel_build/kernel

        # 直接复制KernelSU到drivers目录（避免符号链接权限问题）
        cp -r ../KernelSU/kernel drivers/kernelsu

        # 验证复制成功
        if [ -d "drivers/kernelsu" ]; then
          echo "KernelSU复制成功"
          ls -la drivers/kernelsu/
        else
          echo "错误：KernelSU复制失败"
          exit 1
        fi

        # 修改Makefile
        if ! grep -q "kernelsu" drivers/Makefile; then
          echo 'obj-y += kernelsu/' >> drivers/Makefile
          echo "已添加kernelsu到Makefile"
        fi

        # 修改Kconfig
        if ! grep -q "kernelsu" drivers/Kconfig; then
          echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
          echo "已添加kernelsu到Kconfig"
        fi

        echo "KernelSU集成完成"

    - name: 配置内核
      run: |
        cd $HOME/kernel_build/kernel

        # 设置环境变量
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-

        # 禁用栈保护（解决编译器不支持的问题）
        export KCFLAGS="-w"
        export CONFIG_CC_STACKPROTECTOR_STRONG=n

        # 使用默认配置
        make camellia_defconfig

        # 修改配置：禁用栈保护，启用KernelSU
        scripts/config --disable CONFIG_CC_STACKPROTECTOR_STRONG
        scripts/config --disable CONFIG_CC_STACKPROTECTOR
        scripts/config --enable CONFIG_KPROBES
        scripts/config --enable CONFIG_HAVE_KPROBES
        scripts/config --enable CONFIG_KPROBE_EVENTS

        # 手动添加KernelSU配置（如果config工具不识别）
        echo "CONFIG_KSU=y" >> .config

        # 更新配置
        make olddefconfig

        echo "验证配置:"
        grep -E "STACKPROTECTOR|KSU|KPROBES" .config

    - name: 编译内核
      run: |
        cd $HOME/kernel_build/kernel

        # 设置编译环境
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        export USE_CCACHE=1
        export CCACHE_DIR=$HOME/.ccache

        # 禁用栈保护
        export KCFLAGS="-w"
        export CONFIG_CC_STACKPROTECTOR_STRONG=n

        # 清理之前的编译（如果有）
        make clean

        echo "开始编译内核（使用$(nproc)个线程）..."
        make -j$(nproc) Image.gz-dtb 2>&1 | tee build.log || {
          echo "编译失败，显示最后100行日志:"
          tail -n 100 build.log
          exit 1
        }

        echo "编译完成，检查输出文件:"
        if [ -f arch/arm64/boot/Image.gz-dtb ]; then
          echo "内核编译成功！"
          ls -lh arch/arm64/boot/Image.gz-dtb
        else
          echo "错误：未找到编译输出文件"
          exit 1
        fi

    - name: 准备打包工具
      run: |
        cd ${{ github.workspace }}

        # 下载magiskboot
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk
        unzip -j Magisk-*.apk 'lib/x86_64/libmagiskboot.so' -d .
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-*.apk

        # 创建使用说明
        cat > README.md << 'END_README'
        # KernelSU内核使用说明

        ## 关于KernelSU
        KernelSU是内核级的root方案，与Magisk（Kitsune Mask）的关系：
        - KernelSU和Magisk是两种不同的root方案
        - 刷入KernelSU后，不再需要Magisk/Kitsune Mask
        - KernelSU有自己的管理器APP和模块系统
        - 原Magisk模块需要转换才能在KernelSU使用

        ## 刷入步骤

        1. 提取原始boot.img:
           ```
           adb shell su -c 'dd if=/dev/block/by-name/boot of=/sdcard/boot.img'
           adb pull /sdcard/boot.img
           ```

        2. 制作新boot.img:
           ```
           ./magiskboot unpack boot.img
           cp Image.gz-dtb kernel
           ./magiskboot repack boot.img
           ```

        3. 刷入新内核:
           ```
           adb reboot bootloader
           fastboot flash boot new-boot.img
           fastboot reboot
           ```

        4. 安装KernelSU管理器:
           - 下载地址: https://github.com/tiann/KernelSU/releases
           - 安装最新版本的KernelSU.apk

        ## 重要提醒
        - 刷入前务必备份原始boot.img
        - 首次使用需要在KernelSU管理器中授予应用root权限
        - 原Magisk模块不能直接使用，需要适配
        END_README

    - name: 收集编译产物
      run: |
        mkdir -p output
        cp $HOME/kernel_build/kernel/arch/arm64/boot/Image.gz-dtb output/
        cp magiskboot output/
        cp README.md output/

        # 创建版本信息
        cat > output/version.txt << END_VERSION
        编译时间: $(date '+%Y-%m-%d %H:%M:%S')
        设备: 红米Note 10 (camellia)
        内核源码: camellia-r-oss
        KernelSU版本: $(cd $HOME/kernel_build/KernelSU && git describe --tags --always)
        编译器: $(aarch64-linux-gnu-gcc --version | head -n1)
        END_VERSION

    - name: 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: kernelsu-camellia-kernel
        path: output/

    - name: 显示编译摘要
      run: |
        echo "## ✅ 编译成功！" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 设备信息" >> $GITHUB_STEP_SUMMARY
        echo "- 设备: 红米Note 10 (camellia)" >> $GITHUB_STEP_SUMMARY
        echo "- 处理器: MediaTek Dimensity 700" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 KernelSU vs Magisk" >> $GITHUB_STEP_SUMMARY
        echo "- KernelSU是独立的root方案" >> $GITHUB_STEP_SUMMARY
        echo "- 不需要Magisk/Kitsune Mask" >> $GITHUB_STEP_SUMMARY
        echo "- 有专门的KernelSU管理器APP" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 下载内容" >> $GITHUB_STEP_SUMMARY
        echo "- Image.gz-dtb: 编译的内核" >> $GITHUB_STEP_SUMMARY
        echo "- magiskboot: 打包工具" >> $GITHUB_STEP_SUMMARY
        echo "- README.md: 使用说明" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ 注意事项" >> $GITHUB_STEP_SUMMARY
        echo "1. 备份原始boot.img" >> $GITHUB_STEP_SUMMARY
        echo "2. 安装KernelSU管理器APP" >> $GITHUB_STEP_SUMMARY
        echo "3. 原Magisk模块需要转换" >> $GITHUB_STEP_SUMMARY
