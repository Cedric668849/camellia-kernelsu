name: Build Camellia KernelSU Kernel

on:
  workflow_dispatch:
    inputs:
      kernelsu_version:
        description: 'KernelSU版本标签（留空使用最新）'
        required: false
        default: ''

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: 最大化构建空间
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'

    - name: 检出仓库
      uses: actions/checkout@v4

    - name: 安装编译依赖
      run: |
        sudo apt update

        # 安装基础编译工具
        sudo apt install -y \
          bc bison build-essential ccache curl flex \
          git gnupg gperf liblz4-tool \
          libncurses-dev libsdl1.2-dev libssl-dev \
          libxml2 libxml2-utils lzop pngcrush rsync schedtool squashfs-tools \
          xsltproc zip zlib1g-dev python3 python3-pip device-tree-compiler wget

        # 尝试安装交叉编译器（兼容多个版本）
        sudo apt install -y gcc-aarch64-linux-gnu || \
        sudo apt install -y gcc-12-aarch64-linux-gnu || \
        sudo apt install -y gcc-11-aarch64-linux-gnu || \
        sudo apt install -y gcc-10-aarch64-linux-gnu

        # 确认安装的GCC版本
        aarch64-linux-gnu-gcc --version || echo "使用默认版本"

    - name: 设置ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        max-size: "2G"

    - name: 克隆内核源码
      run: |
        git clone https://github.com/MiCode/Xiaomi_Kernel_OpenSource.git -b camellia-r-oss kernel --depth=1
        echo "内核源码克隆完成"

    - name: 克隆KernelSU
      run: |
        if [ -n "${{ github.event.inputs.kernelsu_version }}" ]; then
          git clone https://github.com/tiann/KernelSU.git -b ${{ github.event.inputs.kernelsu_version }} --depth=1
        else
          git clone https://github.com/tiann/KernelSU.git --depth=1
        fi
        cd KernelSU
        echo "KernelSU版本: $(git describe --tags --always)"

    - name: 集成KernelSU到内核
      run: |
        cd kernel
        ln -sf ../KernelSU/kernel drivers/kernelsu
        echo 'obj-y += kernelsu/' >> drivers/Makefile
        echo 'source "drivers/kernelsu/Kconfig"' >> drivers/Kconfig
        echo "KernelSU集成完成"
        ls -la drivers/kernelsu/

    - name: 配置内核
      run: |
        cd kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-

        make camellia_defconfig

        cat >> .config << EOF
        CONFIG_KPROBES=y
        CONFIG_HAVE_KPROBES=y
        CONFIG_KPROBE_EVENTS=y
        CONFIG_KSU=y
        EOF

        make olddefconfig

        echo "检查KernelSU配置:"
        grep -E "CONFIG_KSU|CONFIG_KPROBES" .config

    - name: 编译内核
      run: |
        cd kernel
        export ARCH=arm64
        export SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-gnu-
        export USE_CCACHE=1
        export CCACHE_DIR=~/.ccache

        echo "开始编译内核..."
        make -j$(nproc) Image.gz-dtb

        echo "编译完成，检查输出文件:"
        ls -lh arch/arm64/boot/Image.gz-dtb

    - name: 准备打包工具
      run: |
        # 下载magiskboot
        wget -q https://github.com/topjohnwu/Magisk/releases/latest/download/Magisk-26.4.apk
        unzip -j Magisk-*.apk 'lib/x86_64/libmagiskboot.so' -d .
        mv libmagiskboot.so magiskboot
        chmod +x magiskboot
        rm Magisk-*.apk

        # 创建打包脚本
        cat > pack_boot.sh << 'EOF'
        #!/bin/bash
        echo "===== Boot.img打包说明 ====="
        echo ""
        echo "使用方法："
        echo "1. 从手机提取原始boot.img:"
        echo "   adb shell su -c 'dd if=/dev/block/by-name/boot of=/sdcard/boot.img'"
        echo "   adb pull /sdcard/boot.img"
        echo ""
        echo "2. 解包原始boot.img:"
        echo "   ./magiskboot unpack boot.img"
        echo ""
        echo "3. 替换内核:"
        echo "   cp Image.gz-dtb kernel"
        echo ""
        echo "4. 重新打包:"
        echo "   ./magiskboot repack boot.img"
        echo "   (生成new-boot.img)"
        echo ""
        echo "5. 刷入新内核:"
        echo "   adb reboot bootloader"
        echo "   fastboot flash boot new-boot.img"
        echo "   fastboot reboot"
        EOF
        chmod +x pack_boot.sh

    - name: 收集编译信息
      run: |
        cat > build_info.txt << EOF
        ===== KernelSU内核编译信息 =====

        编译时间: $(date '+%Y-%m-%d %H:%M:%S')
        设备: 红米Note 10 (camellia)
        处理器: MediaTek Dimensity 700
        Android版本: 11 (R)

        KernelSU版本: $(cd KernelSU && git describe --tags --always)
        内核文件: Image.gz-dtb
        文件大小: $(ls -lh kernel/arch/arm64/boot/Image.gz-dtb | awk '{print $5}')

        GCC版本:
        $(aarch64-linux-gnu-gcc --version | head -n1)

        使用说明:
        1. 下载本压缩包
        2. 解压获得Image.gz-dtb和工具
        3. 按照pack_boot.sh中的说明打包boot.img
        4. 刷入手机测试

        注意：请先备份原始boot.img！
        EOF

    - name: 上传编译产物
      uses: actions/upload-artifact@v4
      with:
        name: kernelsu-camellia
        path: |
          kernel/arch/arm64/boot/Image.gz-dtb
          magiskboot
          pack_boot.sh
          build_info.txt

    - name: 显示编译摘要
      run: |
        echo "## 🎉 编译成功！" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📱 设备信息" >> $GITHUB_STEP_SUMMARY
        echo "- 设备: 红米Note 10 (camellia)" >> $GITHUB_STEP_SUMMARY
        echo "- 处理器: MediaTek Dimensity 700" >> $GITHUB_STEP_SUMMARY
        echo "- Android版本: 11 (R)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 编译产物" >> $GITHUB_STEP_SUMMARY
        echo "- 内核文件: Image.gz-dtb" >> $GITHUB_STEP_SUMMARY
        echo "- 文件大小: $(ls -lh kernel/arch/arm64/boot/Image.gz-dtb | awk '{print $5}')" >> $GITHUB_STEP_SUMMARY
        echo "- KernelSU: ✅ 已集成" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📥 下载" >> $GITHUB_STEP_SUMMARY
        echo "请在Actions页面下载 **kernelsu-camellia.zip**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ 注意事项" >> $GITHUB_STEP_SUMMARY
        echo "1. 刷入前请备份原始boot.img" >> $GITHUB_STEP_SUMMARY
        echo "2. 需要解锁Bootloader" >> $GITHUB_STEP_SUMMARY
        echo "3. 首次刷入可能需要清除数据" >> $GITHUB_STEP_SUMMARY
